#include "BatchScriptWriter.h"

BatchScriptWriter::BatchScriptWriter(int argc, char* argv[]):
  exec("")
{
  for (int i=0; i<argc; i++){
    if ( string(argv[i])==string("--nbatchjobs") || (i>0 && string(argv[i-1])==string("--nbatchjobs")) ) {
      continue;
    }
    exec += string(argv[i]) + " ";
  }
  subpkg = string(argv[0]);
}

BatchScriptWriter::~BatchScriptWriter(){}

void BatchScriptWriter::writeScripts(OptParser *arg, vector<Combiner*> *cmb){
 
  for ( int i=0; i<arg->combid.size(); i++ )
  {
    int combinerId = arg->combid[i];
    Combiner *c = cmb->at(combinerId);
    c->combine();
    if ( !c->isCombined() ) continue;
    
    if ( !arg->isAction("pluginbatch") ) {
      cout << "BatchScriptWriter::writeScripts() : ERROR : only need to write batch scripts for pluginbatch method" << endl;
      exit(1);
    }
     
    cout << "Writing submission scripts for combination " << c->getName() << endl;
    
    TString dirname = "sub/scan1dPlugin_"+c->getName()+"_"+arg->var[0];
    if ( arg->var.size()==2 ) {
      dirname = "sub/scan2dPlugin_"+c->getName()+"_"+arg->var[0];
    }
    if ( arg->var.size()>1) {
      dirname += "_"+arg->var[1];
    }
    system(Form("mkdir -p %s",dirname.Data()));
    TString scriptname = dirname+"/scan1dPlugin_"+c->getName()+"_"+arg->var[0];
    if ( arg->var.size()==2 ) {
      scriptname = dirname+"/scan2dPlugin_"+c->getName()+"_"+arg->var[0];
    }
    if ( arg->var.size()>1) {
      scriptname += "_"+arg->var[1];
    }
    
    for ( int job=1; job<=arg->nbatchjobs; job++ ) {
      TString fname = scriptname + Form("_run%d",job) + ".sh";
      writeScript(fname, job, arg);
    }
  }
}

void BatchScriptWriter::writeScript(TString fname, int jobn, OptParser *arg) {

  TString rootfilename = fname;
  (rootfilename.ReplaceAll("sub","root")).ReplaceAll(".sh",".root");
  cout << "\t" << fname << endl;
  ofstream outfile;
  outfile.open(fname);

  char cwd[1024];
  getcwd(cwd,1024);

  outfile << "##### auto-generated by BatchScriptWriter #####" << endl;
  outfile << "#!/bin/bash" << endl;
  outfile << Form("rm -f %s/%s.done",cwd,fname.Data()) << endl;
  outfile << Form("rm -f %s/%s.fail",cwd,fname.Data()) << endl;
  outfile << Form("rm -f %s/%s.run",cwd,fname.Data()) << endl;
  outfile << Form("rm -f %s/%s.log",cwd,fname.Data()) << endl;
  outfile << "mkdir -p scratch" << endl;
  outfile << "cd scratch" << endl;
  outfile << Form("source %s/../scripts/setup_lxplus.sh",cwd) << endl;
  outfile << Form("cp -r %s/ExpNll .",cwd) << endl;
  outfile << "mkdir -p bin" << endl;
  outfile << Form("cp %s/%s bin/",cwd,subpkg.c_str()) << endl;
  outfile << "mkdir -p plots/dot" << endl;
  outfile << Form("cp -r %s/plots/dot/* plots/dot",cwd) << endl;
  outfile << "mkdir -p plots/par" << endl;
  outfile << Form("cp -r %s/plots/par/* plots/par",cwd) << endl;
  outfile << "mkdir -p plots/scanner" << endl;
  outfile << "mkdir -p root" << endl;
  outfile << Form("touch %s/%s.run",cwd,fname.Data()) << endl;
  outfile << Form("if ( %s --nrun %d ); then",exec.c_str(),jobn) << endl;
  outfile << Form("\ttouch %s/%s.done",cwd,fname.Data()) << endl;
  outfile << Form("\trm -f %s/%s.run",cwd,fname.Data()) << endl;
  outfile << "else" << endl;
  outfile << Form("\ttouch %s/%s.fail",cwd,fname.Data()) << endl;
  outfile << Form("\trm -f %s/%s.run",cwd,fname.Data()) << endl;
  outfile << "fi" << endl;
  TString outfloc = fname;
  outfile << Form("cp %s %s/%s",rootfilename.Data(),cwd,outfloc.ReplaceAll(".sh",".root").Data()) << endl;

  outfile.close();

  system(Form("chmod +x %s",fname.Data()));

  if ( arg->queue != "" ) {
    system(Form("bsub -q %s -o %s/%s.log %s/%s",arg->queue.Data(),cwd,fname.Data(),cwd,fname.Data()));
  }
}
